name: Memos Build New


on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        goarch: [amd64]
        include:
          - os: windows-latest
            goos: windows
            goarch: amd64
            cgo_env: CC=x86_64-w64-mingw32-gcc

    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
      CGO_ENABLED: 0

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Clone Memos
      run: git clone https://github.com/usememos/memos.git --branch release/0.18.2
    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16.20.2'

    - name: Build frontend (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        cd memos/web
        npm install -g pnpm --force
        pnpm i --frozen-lockfile
        pnpm type-gen
        pnpm build
       
    - name: Build frontend (non-Windows)
      if: matrix.os != 'windows-latest'
      run: |
        cd memos/web
        npm install -g pnpm --force
        pnpm i --frozen-lockfile
        pnpm type-gen
        pnpm build

    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: '1.21.4'

    - name: Install mingw-w64 (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install mingw
        echo ${{ matrix.cgo_env }} >> $GITHUB_ENV

        
    - name: Install gcc-aarch64-linux-gnu (Ubuntu ARM64)
      if: matrix.os == 'ubuntu-latest' && matrix.goarch == 'arm64'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu
        echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV


        
    - name: Build backend (none-Windows)
      if: matrix.os != 'windows-latest'
      run: |
        cd memos
        ls server/frontend
        rm -rf server/frontend/dist
        ls web/dist
        mv web/dist server/frontend/dist
        ls server/frontend/dist
        tar -czvf dist.tar.gz server/frontend/dist
        go build -o memos-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.os == 'windows-latest' && '.exe' || '' }} ./bin/memos/main.go
        mkdir memos
        mv memos-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.os == 'windows-latest' && '.exe' || '' }} memos
        mv server/frontend/dist memos/dist



        
    - name: Build backend (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd memos
        Remove-Item server/frontend/dist -Recurse -Force -ErrorAction SilentlyContinue
        Move-Item web/dist server/frontend/dist -Force -ErrorAction Stop
        Compress-Archive -Path server/frontend/dist -DestinationPath dist.tar.gz
        go build -o memos-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.os == 'windows-latest' && '.exe' || '' }} ./bin/memos/main.go
        mkdir memos
        Move-Item  memos-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.os == 'windows-latest' && '.exe' || '' }} memos
        Move-Item server/frontend/dist memos/dist
        Compress-Archive -Path memos/dist -DestinationPath memos/memos.tar.gz


        
    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: memos-binary-${{ matrix.os }}-${{ matrix.goarch }}
        path: memos/memos/memos.tar.gz


        
